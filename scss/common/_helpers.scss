/**
  Generate style for background image on full page based on @media

  @param {string} $url - url path to origin name, return example based on @media: '/example.jpg' -> ['/example.jpg', '/example-small.jpg', '/example-medium.jpg', '/example-large.jpg']
  @param {boolean} $isAfter - set options for :after
 */
@mixin response-image($url, $isAfter) {
  @if $isAfter {
    display: block;
    content: '';
    z-index: -1;
    width: 100%;
    height: 100%;
    position: absolute;
    top:0;
    bottom:0;
    left:0;
    right:0;
  } @else {
    min-height: 100%;
  }

  background-position: center center;
  background-repeat:  no-repeat;
  background-attachment: fixed;
  background-size:  cover;
  background-color: #999;

  $small: str-insert($url, "-small", -5);
  $medium: str-insert($url, "-medium", -5);
  $large: str-insert($url, "-large", -5);
  $origin: $url;

  background-image: url($small);

  @media
  only screen and (-webkit-min-device-pixel-ratio: 1.5),
  only screen and (-o-min-device-pixel-ratio: 3/2),
  only screen and (min-resolution: 144dpi),
  only screen and (min-resolution: 1.5dppx){
    /* Retina-specific stuff here */
    background-image: url($medium), url($small);
  }

  @media
  only screen and (min-width: $screen-m) {
    background-image: url($medium), url($small);

    @media
    (-webkit-min-device-pixel-ratio: 1.5),
    (-o-min-device-pixel-ratio: 3/2),
    (min-resolution: 144dpi),
    (min-resolution: 1.5dppx){
      /* Retina-specific stuff here */
      background-image: url($origin), url($small);
    }
  }

  @media
  only screen and (min-width: $screen-xl) {
    background-image: url($large), url($small);

    @media
    (-webkit-min-device-pixel-ratio: 1.5),
    (-o-min-device-pixel-ratio: 3/2),
    (min-resolution: 144dpi),
    (min-resolution: 1.5dppx){
      /* Retina-specific stuff here */
      background-image: url($origin), url($small);
    }
  }

  @media
  only screen and (min-width: $screen-xxl) {
    background-image: url($origin), url($small);
  }
}